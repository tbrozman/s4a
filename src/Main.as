package {	import com.greensock.TweenLite;	import flash.display.*;	import flash.events.*;	import com.space4architecture.opener.Opener;	import com.space4architecture.ui.MainMenu;	import com.space4architecture.utils.Utils;	import com.space4architecture.ui.Footer;	import com.space4architecture.data.PageData;	import com.space4architecture.ui.Transitions;	import com.space4architecture.data.PageData;	import com.space4architecture.ui.NavBar;		public class Main extends MovieClip	{		var opener:Opener;		var mainMenu:MainMenu;		var utils:Utils;		var footer:Footer;		var pageData:PageData;		var transitions:Transitions;		var navBar:NavBar;				//CONSTRUCTOR		public function Main()		{				utils = new Utils();			init();		}				//INITIALIZE FUNCTION - creates and animates opener		public function init():void		{			pageData = new PageData(stage);			pageData.addEventListener(PageData.PAGE_CHANGED, pageChange);			transitions = new Transitions(stage, pageData);			navBar = new NavBar(stage, pageData);			opener = new Opener(stage, pageData);			opener.beginAnimation();			opener.addEventListener(Opener.OPENER_COMPLETE, createMainMenu);			mainMenu = new MainMenu(stage, pageData);			mainMenu.addEventListener(MainMenu.MENU_COMPLETE, createFooter);						trace("init succesful");		}				public function createMainMenu(evt:Event):void		{			trace("creating main menu...");			mainMenu.createMainMenu();			mainMenu.addEventListener(MainMenu.MENU_BUTTON_CLICKED, menuButtonClicked);			//mainMenu.addEventListener(MainMenu.MENU_COMPLETE, menuComplete);		}				public function createFooter(evt:Event):void		{			trace("(main) creating footer");			footer = new Footer(stage);			footer.fadeIn();			footer.addEventListener(Footer.RESET, restartSite);		}				public function menuButtonClicked(evt:Event):void		{			trace("Main says: Menu Button Clicked");			trace("Page index now: " + pageData.pageIndex);			transitions.menuToPage();			trace("should fade out");			footer.fadeOutAddress();			navBar.addNavBar();			//transitions.loadPage();			navBar.addEventListener(NavBar.NAV_BUTTON_CLICKED, navButtonClicked);		}				public function navButtonClicked(evt:Event):void		{			trace("from main - nav button clicked!");			trace("page index is now " + pageData.pageIndex);			transitions.replaceTitle();			//transitions.loadPage();		}				private function pageChange(evt:Event):void		{			trace("main - page change");			transitions.changePage();		}								/* color tranform b&w //				//Import the packages needed.		import com.greensock.*; 		import com.greensock.easing.*;		//1.Array to hold all the picture instances.		var picArr:Array=new Array(pic1_mc,pic2_mc,pic3_mc,pic4_mc,pic5_mc,		pic6_mc);		//2.Function to control the rollover and rollout effect		function rollBW(picture:MovieClip):void {		picture.addEventListener(MouseEvent.MOUSE_OVER, over);		picture.addEventListener(MouseEvent.MOUSE_OUT, out);		//using the colorMatrixFilter and colorizing with white, hex FFFFFF		//gives you a black and white effect.		//The over state just removes the colorMatrixFilter by giving it no value		function over(event:MouseEvent):void {		    TweenMax.to(picture, .5, {colorMatrixFilter:{}});		}		//on rollout set images to black and white		function out(event:MouseEvent):void {		    TweenMax.to(picture, .5, {colorMatrixFilter:{colorize:0xFFFFFF}});		}		}		//3.For loop to call move images, and initally set the set images black and white		for (var i = 0; i < picArr.length; i++) {  		rollBW(picArr[i]);   		TweenMax.to(picArr[i], 0, {colorMatrixFilter:{colorize:0xFFFFFF}}); 		}						*/				/* url request code				var url:URLRequest = new URLRequest("whatever.com"); 		navigateToURL(url, "_blank");								mail to :				var emailLink:String = "mailto:email@address.com";		//ADD EVENT LISTENER FOR EMAIL LINK		mailtoLink.addEventListener(MouseEvent.MOUSE_DOWN,function():void {		     navigateToURL(new URLRequest(emailLink), "_blank");}		);						*/								/*				public function createFooter(evt:Event):void		{			trace("time to make the footer");			var footerMC:MovieClip = new MovieClip;			footerMC.x = 40;			footerMC.y = 600;			var footerLogo:FooterLogo = new FooterLogo();			footerLogo.x = 0;			footerLogo.y = 0;			footerLogo.buttonMode = true;			footerLogo.addEventListener(MouseEvent.CLICK, restartSite);			var addressBar:AddressBar = new AddressBar();			addressBar.x = 300;			addressBar.y = 0;			var emailLink:FooterEmailLink = new FooterEmailLink();			emailLink.x = addressBar.x + addressBar.width + 5;			emailLink.y = 0;			emailLink.addEventListener(MouseEvent.ROLL_OVER, function(evt:MouseEvent){evt.target.gotoAndStop("over")});			emailLink.addEventListener(MouseEvent.ROLL_OUT, function(evt:MouseEvent){evt.target.gotoAndStop("out")});			emailLink.buttonMode = true;			footerMC.addChild(footerLogo);			footerMC.addChild(addressBar);			footerMC.addChild(emailLink);						stage.addChild(footerMC);		}				*/				public function restartSite(evt:Event):void		{			var childCount:int = stage.numChildren;			for(var i:int = 1; i < childCount; i++)			{				stage.removeChildAt(1);			}			init();		}			}}/*import TeamPage;var titlePosition:Array = [10,10];var navButtons:Array = [residential_obj, profile_obj, publications_obj, team_obj];var currentLine:Object;var activeButtonIndex:int;trace("menuImage" in team_obj);//Add Main Menu ButtonsaddMenuButtons(menuButtons);function addMenuButtons(buttonArray:Array):void {	for (var i:int = 0; i < buttonArray.length; i++) {		if ("menuImage" in buttonArray[i]){			buttonArray[i].menuImage.addEventListener(MouseEvent.CLICK, menuButtonClicked);			buttonArray[i].menuImage.addEventListener(MouseEvent.ROLL_OVER, menuButtonOver);			buttonArray[i].menuImage.addEventListener(MouseEvent.ROLL_OUT, menuButtonOut);			buttonArray[i].menuImage.buttonMode = true;		}		buttonArray[i].titleText.addEventListener(MouseEvent.CLICK, menuButtonClicked);		buttonArray[i].titleText.addEventListener(MouseEvent.ROLL_OVER, menuButtonOver);		buttonArray[i].titleText.addEventListener(MouseEvent.ROLL_OUT, menuButtonOut);		buttonArray[i].titleText.buttonMode = true;	}}//Main screen button clickedfunction menuButtonClicked(event:MouseEvent):void {	trace("pre active button index " + activeButtonIndex);	activeButtonIndex = findButtonIndex(event.target, menuButtons);	trace("active button index: " + activeButtonIndex);	for (var k:int = 0; k < menuButtons.length; k++) {		if("menuImage" in menuButtons[k]) {			menuButtons[k].menuImage.removeEventListener(MouseEvent.CLICK, menuButtonClicked);			menuButtons[k].menuImage.removeEventListener(MouseEvent.ROLL_OVER, menuButtonOver);									menuButtons[k].menuImage.removeEventListener(MouseEvent.ROLL_OUT, menuButtonOut);			menuButtons[k].menuImage.buttonMode = false;		}		menuButtons[k].titleText.removeEventListener(MouseEvent.CLICK, menuButtonClicked);		menuButtons[k].titleText.removeEventListener(MouseEvent.ROLL_OVER, menuButtonOver);		menuButtons[k].titleText.removeEventListener(MouseEvent.ROLL_OVER, menuButtonOut);		menuButtons[k].titleText.buttonMode = false;				if (k == activeButtonIndex) {			trace("bing");			menuButtons[k].titleText.alpha = 1;			menuButtons[k].line.alpha = 1;			if ("menuImage" in menuButtons[k]) {				TweenLite.to(menuButtons[k].menuImage, 1, {alpha:0});			}			trace("faded out image");			trace("position start = " + menuButtons[k].titleText.x + " " + menuButtons[k].titleText.y);			TweenLite.to(menuButtons[k].titleText, 2, {x:titlePosition[0], y:titlePosition[1], onComplete:textMoveComplete, });			trace("moved text");			TweenLite.to(menuButtons[k].line, 2, {x:titlePosition[0] + menuButtons[k].titleText.width, y:titlePosition[1] + .5*menuButtons[k].titleText.height});			trace("moved line");z			menuButtons[k].menuImage.removeEventListener(MouseEvent.CLICK, menuButtonClicked);		}		else {			trace(k);			if ("menuImage" in menuButtons[k]) {				TweenLite.to(menuButtons[k].menuImage, 1, {alpha:0});			}			TweenLite.to(menuButtons[k].line, 1, {alpha:0});			TweenLite.to(menuButtons[k].titleText, 1, {alpha:0});			trace("faded out button " + k);		}	}	modifyFooter();}function textMoveComplete(){	trace("position end = " + menuButtons[k].titleText.x + " " + menuButtons[k].titleText.y);}function menuButtonOver(event:MouseEvent):void {	event.target.gotoAndStop("over");}function menuButtonOut(event:MouseEvent):void {	event.target.gotoAndStop("out");}footer_line.logoBottom.buttonMode = true;footer_line.logoBottom.addEventListener(MouseEvent.CLICK, function () {emptyContainer(pageContainer); gotoAndPlay(1);});function modifyFooter():void {	TweenLite.to(footer_line.address_bar, 1, {alpha:0});	TweenLite.to(footer_line.bottom_nav_bar, 1, {alpha:1, onComplete:prepNavBar});}function prepNavBar():void {	footer_line.bottom_nav_bar.addEventListener(MouseEvent.CLICK, navButtonClicked);	footer_line.bottom_nav_bar.buttonMode = true;}function navButtonClicked(event:MouseEvent):void {	TweenLite.to(menuButtons[activeButtonIndex].titleText, 1, {alpha:0});	TweenLite.to(menuButtons[activeButtonIndex].line, 1, {alpha:0});	activeButtonIndex = findButtonIndex(event.target, menuButtons);	trace(activeButtonIndex);	menuButtons[activeButtonIndex].titleText.x = titlePosition[0];	menuButtons[activeButtonIndex].titleText.y = titlePosition[1];	//menuButtons[k].line, 2, {x:titlePosition[0] + menuButtons[k].titleText.width, y:titlePosition[1]	//+ .5*menuButtons[k].titleText.height});	menuButtons[activeButtonIndex].line.x = titlePosition[0] + menuButtons[activeButtonIndex].titleText.width;	menuButtons[activeButtonIndex].line.y = titlePosition[1] + menuButtons[activeButtonIndex].titleText.height / 2;	TweenLite.to(menuButtons[activeButtonIndex].titleText, 1, {alpha:1});	TweenLite.to(menuButtons[activeButtonIndex].line, 1, {alpha:1});	updatePage();}function updatePage():void {	TweenLite.to(pageContainer, 1, {alpha:0, onComplete: switchPage});	function switchPage():void {		emptyContainer(pageContainer);		pageContainer.addChild(new TeamPage());		TweenLite.to(pageContainer, 1, {alpha:1});	}}function emptyContainer(container:DisplayObjectContainer):void {	var childCount:int = container.numChildren;	for(var i:int = 0; i < childCount; i++) {		container.removeChildAt(i);	}}function findButtonIndex(target:*, objArray):int {	trace("function target: " + target.name);	//trace("function array: " + objArray[2].line.name);	for (var i:int = 0; i < objArray.length; i++) {		for each (var element:* in objArray[i]){			//trace("element.name: " + element.name);						if (element.name == target.name){				return i;				i = objArray.length;				break;			}		}	}	return 0;}residential_btn.addEventListener(MouseEvent.CLICK, residentialClicked);function residentialClicked(event:MouseEvent):void{	trace("button clicked");	gotoAndPlay("projects");}stop();*/